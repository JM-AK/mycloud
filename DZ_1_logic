Как организовать клиент-серверное взаимодействие?
  Ответ:
    т.к. не предполагается взаимодействие клиентов между собой, то необходимо обеспечить параллельное обслуживание сервера множества клиентов
    клиентские сессии не зависят друг от друга
    т.е. сервер должен работать асинхронно
    т.к. сокет сервера, через который сервер слушает входящий поток 1, то он должен быть как-то разбит, чтобы отделить потоки клиентских сообщений.
    для этого существует возможность использования каналов.
    для каждого клиента открыть 1й канал для сообщений, 2й канал для передачи файлов (в очереди)
    
Как и в каком виде передавать файлы?
  Ответ:
    файлы как и команды передавать по сети побайтово используя разработанный протокол - правила записи и чтения данных в/из потока 
    структура сообщения
    тип сообщения (1б) | длина имени файла (256 б) | имя файла | размер файла (100.000 б) | сам файл | 
    
    если будет хэшшсумма, то мб надо будет переделать
    
Как пересылать большие файлы?
  Ответ:
  небольшими кусками, чтобы не забить оперативную память, используя отдельный канал для файла, чтобы не остановить работу пользователя с приложением
  
Как пересылать служебные команды?
  Ответ:
  аналогично файлу через разработанный протокол
  тип сообщения (1б) | длина команды (256 б) | команда
  
Что хранить в базе данных?
  Ответ:
  логин и пароль пользователей для авторизации
  структуру хранилища данных для клиентов с ссылками на репозитории
  
Как передавать структуру каталогов/файлов?
  Ответ:
  при авторизации пользователя в клиентское приложение от сервера должна быть получена актуальная таблица со структурой файлов. 
  эта таблица хранится и у пользователя на ПК и на сервере, это может быть файл xml, json, txt.
  во время работы пользователь отпраляет серверу команды на update таблицы данных.
  т.е. передается как файл

Какую библиотеку использовать для сетевого взаимодействия: java.io, java.nio, Netty?
  Ответ:
  java.nio + Netty
  
